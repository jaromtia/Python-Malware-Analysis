import zipfile
import io
import os

def read_zip_file(file_path: str) -> bytes:
    """
    Reads the content of a ZIP file and returns it as bytes.
    
    :param file_path: Path to the ZIP file.
    :return: The content of the ZIP file as bytes.
    """
    try:
        with open(file_path, 'rb') as f:
            return f.read()
    except FileNotFoundError:
        print(f"Error: The file at {file_path} was not found.")
        exit(-1)
    except IOError as e:
        print(f"Error reading file {file_path}: {e}")
        exit(-1)

def unzip_and_save(carved_zip: bytes, extraction_path: str):
    """
    Decompresses the given ZIP data and saves the extracted content to the specified directory.
    
    :param carved_zip: The compressed ZIP data as a byte object.
    :param extraction_path: The path to the directory where the extracted files will be saved.
    """
    try:
        with zipfile.ZipFile(io.BytesIO(carved_zip), 'r') as zip_ref:
            zip_ref.extractall(extraction_path)
            print(f"Extracted content to {extraction_path}")
    except zipfile.BadZipFile:
        print("Error: The provided data is not a valid ZIP file.")
    except Exception as e:
        print(f"An error occurred: {e}")

def main():
    zip_file_path = './compressed_data.zip'  # Replace with your ZIP file path
    extraction_path = './extracted_files'
    
    # Ensure the extraction directory exists
    if not os.path.exists(extraction_path):
        os.makedirs(extraction_path)
    
    # Read the ZIP file from disk
    carved_zip = read_zip_file(zip_file_path)
    print(f"Read ZIP file size: {len(carved_zip)} bytes")

    # Decompress and save the files
    unzip_and_save(carved_zip, extraction_path)

if __name__ == "__main__":
    main()
