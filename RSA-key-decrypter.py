from cryptography.hazmat.primitives import asymmetric, hashes, serialization
from cryptography.hazmat.backends import default_backend

# Load the carved private key
private_key_pem = b"""-----BEGIN RSA PRIVATE KEY-----
# ... (private key here)
-----END RSA PRIVATE KEY-----"""

private_key = serialization.load_pem_private_key(private_key_pem, password=None, backend=default_backend())

# Encrypted data from the binary
encrypted_data = b'\x12\x34\x56\x78...'

# Decrypt the data
decrypted_data = private_key.decrypt(
    encrypted_data,
    asymmetric.padding.OAEP(
        mgf=asymmetric.padding.MGF1(algorithm=hashes.SHA1()),
        algorithm=hashes.SHA1(),
        label=None
    )
)

print(decrypted_data.decode())
