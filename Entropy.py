import math
import matplotlib.pyplot as plt

# Define the block size (in bytes)
block_size = 256

# Read the binary file
filename = 'your_executable_file.exe'

with open(filename, 'rb') as f:
    content = f.read()

# Calculate the number of blocks in the file
num_blocks = len(content) // block_size

# Initialize a list to store entropy values
entropies = []

# Calculate the entropy for each block
for i in range(num_blocks):
    block = content[i * block_size:(i + 1) * block_size]
    freq = [0] * 256

    # Calculate the frequency of each byte in the block
    for byte in block:
        freq[byte] += 1

    # Calculate the entropy of the block
    entropy = 0
    for count in freq:
        if count != 0:
            probability = count / block_size
            entropy -= probability * math.log2(probability)

    entropies.append(entropy)

# Convert block indices to memory addresses
addresses = [i * block_size for i in range(num_blocks)]

# Define entropy threshold
entropy_threshold = max(entropies) * 0.9  # for example, 90% of the maximum entropy

# Identify high-entropy regions
start = None
for i, entropy in enumerate(entropies):
    if entropy >= entropy_threshold:
        if start is None:
            start = i
    elif start is not None:
        end = i
        print(f"High-entropy region from {start * block_size} to {end * block_size} (Block {start})")
        start = None

# Plot the entropy values
plt.plot(addresses, entropies)
plt.xlabel('Memory Address')
plt.ylabel('Entropy')
plt.title('Entropy Analysis of malware sample')
plt.show()
