import struct

# Define the input and output tables as strings
input_table = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"
output_table = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

# Create a mapping from input to output
decode_map = {input_table[i]: output_table[i] for i in range(len(input_table))}

def subst_decode(data):
    # Convert the packed data (8 bytes) into a string (little-endian)
    byte_data = struct.unpack('<8s', data)[0].decode('ascii', errors='ignore')
    
    decoded_message = []
    for char in byte_data:
        # Substitute using the mapping
        decoded_message.append(decode_map.get(char, char))  # Default to the same char if not in the map
    
    # Convert back to bytes and return
    return ''.join(decoded_message).encode('ascii')

# Example encoded data (from main function)
encoded_data = [
    0x6772666f565c3a45,
    0x747a6c6e4c5c6c76,
    0x747a67665c323364,
    0x7462742e72727168,
]

# Decode each segment
decoded_data = b''.join(subst_decode(struct.pack('<Q', i)) for i in encoded_data)

# Print the decoded message
print(decoded_data.decode('ascii', errors='ignore'))
